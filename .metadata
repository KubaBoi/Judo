{"CONTROLLERS": {"ClubsController": {"FILE": "src/controllers/clubsController", "METHODS": {"create": {"POST": "/create"}, "update": {"POST": "/update"}, "get": {"GET": "/get"}, "getAll": {"GET": "/getAll"}, "getByUser": {"GET": "/getByUser"}, "remove": {"POST": "/remove"}}, "CONTROLLER": "/clubs"}, "EventsController": {"FILE": "src/controllers/eventsController", "METHODS": {"create": {"POST": "/create"}, "update": {"POST": "/update"}, "getEvent": {"GET": "/getEvent"}, "getBy": {"GET": "/getBy"}, "remove": {"GET": "/remove"}}, "CONTROLLER": "/events"}, "HotelsController": {"FILE": "src/controllers/hotelsController", "METHODS": {"create": {"POST": "/create"}, "update": {"POST": "/update"}, "getAll": {"GET": "/getAll"}, "get": {"GET": "/get"}, "getBy": {"GET": "/getBy"}, "getRooms": {"GET": "/getRooms"}, "reserveBed": {"POST": "/reserveBed"}, "remove": {"GET": "/remove"}}, "CONTROLLER": "/hotels"}, "JbController": {"FILE": "src/controllers/jbController", "METHODS": {"create": {"POST": "/create"}, "createFromCvs": {"POST": "/createByCvs"}, "update": {"POST": "/update"}, "getByClub": {"GET": "/getByClub"}, "remove": {"POST": "/remove"}}, "CONTROLLER": "/jb"}, "RegisteredClubsController": {"FILE": "src/controllers/registeredClubsController", "METHODS": {"create": {"POST": "/create"}, "register": {"POST": "/register"}, "getByEvent": {"POST": "/getByEvent"}, "remove": {"POST": "/remove"}}, "CONTROLLER": "/registeredClubs"}, "RegisteredHotelsController": {"FILE": "src/controllers/registeredHotelsController", "METHODS": {"create": {"POST": "/create"}, "getByEvent": {"POST": "/getByEvent"}, "remove": {"POST": "/remove"}}, "CONTROLLER": "/registeredHotels"}, "RegisteredJbController": {"FILE": "src/controllers/registeredJbController", "METHODS": {"create": {"POST": "/create"}, "update": {"POST": "/update"}, "getByRegisteredClub": {"POST": "/getByRegisteredClub"}, "remove": {"POST": "/remove"}}, "CONTROLLER": "/registeredJb"}, "UsersController": {"FILE": "src/controllers/usersController", "METHODS": {"login": {"GET": "/login"}, "register": {"POST": "/register"}, "create": {"GET": "/create"}, "get": {"POST": "/get"}}, "CONTROLLER": "/users"}}, "REPOSITORIES": {"BedRepository": {"FILE": "src/repositories/bedRepository", "METHODS": {"findAll": {"RETURN": "array", "QUERY": "select * from bed;"}, "find": {"RETURN": "one", "QUERY": "select * from bed where id=:id;"}, "findBy": {"RETURN": "array", "QUERY": "select * from bed where :columnName=:value;"}, "findNewId": {"QUERY": "select max(id) from bed;", "RETURN": "num"}, "save": {"COMMIT": "insert into bed (id, room_id, jb_id) values :obj;", "RETURN": ""}, "update": {"COMMIT": "update bed set (id, room_id, jb_id) = :obj where id=obj.id;", "RETURN": ""}, "delete": {"COMMIT": "delete from bed where id=model.id;", "RETURN": ""}}, "REPOSITORY": "bed", "DBSCHEME": "(id, room_id, jb_id)", "DBMODEL": "Bed"}, "ClubsRepository": {"FILE": "src/repositories/clubsRepository", "METHODS": {"findAll": {"RETURN": "array", "QUERY": "select * from clubs;"}, "find": {"RETURN": "one", "QUERY": "select * from clubs where id=:id;"}, "findBy": {"RETURN": "array", "QUERY": "select * from clubs where :columnName=:value;"}, "findNewId": {"QUERY": "select max(id) from clubs;", "RETURN": "num"}, "save": {"COMMIT": "insert into clubs (id, eju, user_id, state, name, address) values :obj;", "RETURN": ""}, "update": {"COMMIT": "update clubs set (id, eju, user_id, state, name, address) = :obj where id=obj.id;", "RETURN": ""}, "delete": {"COMMIT": "delete from clubs where id=model.id;", "RETURN": ""}}, "REPOSITORY": "clubs", "DBSCHEME": "(id, eju, user_id, state, name, address)", "DBMODEL": "Clubs"}, "EventsRepository": {"FILE": "src/repositories/eventsRepository", "METHODS": {"findBySorted": {"RETURN": "array", "QUERY": "select * from events order by :columnName ASC;"}, "findAll": {"RETURN": "array", "QUERY": "select * from events;"}, "find": {"RETURN": "one", "QUERY": "select * from events where id=:id;"}, "findBy": {"RETURN": "array", "QUERY": "select * from events where :columnName=:value;"}, "findNewId": {"QUERY": "select max(id) from events;", "RETURN": "num"}, "save": {"COMMIT": "insert into events (id, show_hotel, pcr_price, ag_price, trans_price, other_price, event_start, event_end, arrive, depart, end_visa, end_room, organiser_id, eju_price, name, category, place, visa_phone, visa_mail) values :obj;", "RETURN": ""}, "update": {"COMMIT": "update events set (id, show_hotel, pcr_price, ag_price, trans_price, other_price, event_start, event_end, arrive, depart, end_visa, end_room, organiser_id, eju_price, name, category, place, visa_phone, visa_mail) = :obj where id=obj.id;", "RETURN": ""}, "delete": {"COMMIT": "delete from events where id=model.id;", "RETURN": ""}}, "REPOSITORY": "events", "DBSCHEME": "(id, show_hotel, pcr_price, ag_price, trans_price, other_price, event_start, event_end, arrive, depart, end_visa, end_room, organiser_id, eju_price, name, category, place, visa_phone, visa_mail)", "DBMODEL": "Events"}, "HotelsRepository": {"FILE": "src/repositories/hotelsRepository", "METHODS": {"findBySorted": {"RETURN": "array", "QUERY": "select * from hotels order by :columnName ASC;"}, "findAll": {"RETURN": "array", "QUERY": "select * from hotels;"}, "find": {"RETURN": "one", "QUERY": "select * from hotels where id=:id;"}, "findBy": {"RETURN": "array", "QUERY": "select * from hotels where :columnName=:value;"}, "findNewId": {"QUERY": "select max(id) from hotels;", "RETURN": "num"}, "save": {"COMMIT": "insert into hotels (id, package, p_nights, mail, web, phone, name, address) values :obj;", "RETURN": ""}, "update": {"COMMIT": "update hotels set (id, package, p_nights, mail, web, phone, name, address) = :obj where id=obj.id;", "RETURN": ""}, "delete": {"COMMIT": "delete from hotels where id=model.id;", "RETURN": ""}}, "REPOSITORY": "hotels", "DBSCHEME": "(id, package, p_nights, mail, web, phone, name, address)", "DBMODEL": "Hotels"}, "JbRepository": {"FILE": "src/repositories/jbRepository", "METHODS": {"findAll": {"RETURN": "array", "QUERY": "select * from jb;"}, "find": {"RETURN": "one", "QUERY": "select * from jb where id=:id;"}, "findBy": {"RETURN": "array", "QUERY": "select * from jb where :columnName=:value;"}, "findNewId": {"QUERY": "select max(id) from jb;", "RETURN": "num"}, "save": {"COMMIT": "insert into jb (id, club_id, birthday, pass_release, pass_expiration, function, pass_id, gender, jb, name, sur_name) values :obj;", "RETURN": ""}, "update": {"COMMIT": "update jb set (id, club_id, birthday, pass_release, pass_expiration, function, pass_id, gender, jb, name, sur_name) = :obj where id=obj.id;", "RETURN": ""}, "delete": {"COMMIT": "delete from jb where id=model.id;", "RETURN": ""}}, "REPOSITORY": "jb", "DBSCHEME": "(id, club_id, birthday, pass_release, pass_expiration, function, pass_id, gender, jb, name, sur_name)", "DBMODEL": "Jb"}, "PasswordsRepository": {"FILE": "src/repositories/passwordsRepository", "METHODS": {"login": {"RETURN": "bool", "QUERY": "select case when exists (select * from passwords p where p.login = :login and p.password = :password) then cast(1 as bit) else cast(0 as bit) end;"}, "findAll": {"RETURN": "array", "QUERY": "select * from passwords;"}, "find": {"RETURN": "one", "QUERY": "select * from passwords where id=:id;"}, "findBy": {"RETURN": "array", "QUERY": "select * from passwords where :columnName=:value;"}, "findNewId": {"QUERY": "select max(id) from passwords;", "RETURN": "num"}, "save": {"COMMIT": "insert into passwords (id, password, login) values :obj;", "RETURN": ""}, "update": {"COMMIT": "update passwords set (id, password, login) = :obj where id=obj.id;", "RETURN": ""}, "delete": {"COMMIT": "delete from passwords where id=model.id;", "RETURN": ""}}, "REPOSITORY": "passwords", "DBSCHEME": "(id, password, login)", "DBMODEL": "Passwords"}, "RegisteredClubsRepository": {"FILE": "src/repositories/registeredClubsRepository", "METHODS": {"findAll": {"RETURN": "array", "QUERY": "select * from registered_clubs;"}, "find": {"RETURN": "one", "QUERY": "select * from registered_clubs where id=:id;"}, "findBy": {"RETURN": "array", "QUERY": "select * from registered_clubs where :columnName=:value;"}, "findNewId": {"QUERY": "select max(id) from registered_clubs;", "RETURN": "num"}, "save": {"COMMIT": "insert into registered_clubs (id, event_id, club_id, visa, checked) values :obj;", "RETURN": ""}, "update": {"COMMIT": "update registered_clubs set (id, event_id, club_id, visa, checked) = :obj where id=obj.id;", "RETURN": ""}, "delete": {"COMMIT": "delete from registered_clubs where id=model.id;", "RETURN": ""}}, "REPOSITORY": "registered_clubs", "DBSCHEME": "(id, event_id, club_id, visa, checked)", "DBMODEL": "RegisteredClubs"}, "RegisteredHotelsRepository": {"FILE": "src/repositories/registeredHotelsRepository", "METHODS": {"findAll": {"RETURN": "array", "QUERY": "select * from registered_hotels;"}, "find": {"RETURN": "one", "QUERY": "select * from registered_hotels where id=:id;"}, "findBy": {"RETURN": "array", "QUERY": "select * from registered_hotels where :columnName=:value;"}, "findNewId": {"QUERY": "select max(id) from registered_hotels;", "RETURN": "num"}, "save": {"COMMIT": "insert into registered_hotels (id, event_id, hotel_id) values :obj;", "RETURN": ""}, "update": {"COMMIT": "update registered_hotels set (id, event_id, hotel_id) = :obj where id=obj.id;", "RETURN": ""}, "delete": {"COMMIT": "delete from registered_hotels where id=model.id;", "RETURN": ""}}, "REPOSITORY": "registered_hotels", "DBSCHEME": "(id, event_id, hotel_id)", "DBMODEL": "RegisteredHotels"}, "RegisteredJbRepository": {"FILE": "src/repositories/registeredJbRepository", "METHODS": {"findAll": {"RETURN": "array", "QUERY": "select * from registered_jb;"}, "find": {"RETURN": "one", "QUERY": "select * from registered_jb where id=:id;"}, "findBy": {"RETURN": "array", "QUERY": "select * from registered_jb where :columnName=:value;"}, "findNewId": {"QUERY": "select max(id) from registered_jb;", "RETURN": "num"}, "save": {"COMMIT": "insert into registered_jb (id, reg_club_id, jb_id, arrive, departure, transport, flight_number) values :obj;", "RETURN": ""}, "update": {"COMMIT": "update registered_jb set (id, reg_club_id, jb_id, arrive, departure, transport, flight_number) = :obj where id=obj.id;", "RETURN": ""}, "delete": {"COMMIT": "delete from registered_jb where id=model.id;", "RETURN": ""}}, "REPOSITORY": "registered_jb", "DBSCHEME": "(id, reg_club_id, jb_id, arrive, departure, transport, flight_number)", "DBMODEL": "RegisteredJb"}, "RegisteredTestsRepository": {"FILE": "src/repositories/registeredTestsRepository", "METHODS": {"findAll": {"RETURN": "array", "QUERY": "select * from registered_tests;"}, "find": {"RETURN": "one", "QUERY": "select * from registered_tests where id=:id;"}, "findBy": {"RETURN": "array", "QUERY": "select * from registered_tests where :columnName=:value;"}, "findNewId": {"QUERY": "select max(id) from registered_tests;", "RETURN": "num"}, "save": {"COMMIT": "insert into registered_tests (id, reg_jb_id, pcr, date) values :obj;", "RETURN": ""}, "update": {"COMMIT": "update registered_tests set (id, reg_jb_id, pcr, date) = :obj where id=obj.id;", "RETURN": ""}, "delete": {"COMMIT": "delete from registered_tests where id=model.id;", "RETURN": ""}}, "REPOSITORY": "registered_tests", "DBSCHEME": "(id, reg_jb_id, pcr, date)", "DBMODEL": "RegisteredTests"}, "RegistrationsRepository": {"FILE": "src/repositories/registrationsRepository", "METHODS": {"findAll": {"RETURN": "array", "QUERY": "select * from registrations;"}, "find": {"RETURN": "one", "QUERY": "select * from registrations where id=:id;"}, "findBy": {"RETURN": "one", "QUERY": "select * from registrations where :columnName=:value;"}, "findNewId": {"QUERY": "select max(id) from registrations;", "RETURN": "num"}, "save": {"COMMIT": "insert into registrations (id, login, password, phone, full_name, registration_code) values :obj;", "RETURN": ""}, "update": {"COMMIT": "update registrations set (id, login, password, phone, full_name, registration_code) = :obj where id=obj.id;", "RETURN": ""}, "delete": {"COMMIT": "delete from registrations where id=model.id;", "RETURN": ""}}, "REPOSITORY": "registrations", "DBSCHEME": "(id, login, password, phone, full_name, registration_code)", "DBMODEL": "Registrations"}, "RolesRepository": {"FILE": "src/repositories/rolesRepository", "METHODS": {"findAll": {"RETURN": "array", "QUERY": "select * from roles;"}, "find": {"RETURN": "one", "QUERY": "select * from roles where id=:id;"}, "findBy": {"RETURN": "array", "QUERY": "select * from roles where :columnName=:value;"}, "findNewId": {"QUERY": "select max(id) from roles;", "RETURN": "num"}, "save": {"COMMIT": "insert into roles (id, desc) values :obj;", "RETURN": ""}, "update": {"COMMIT": "update roles set (id, desc) = :obj where id=obj.id;", "RETURN": ""}, "delete": {"COMMIT": "delete from roles where id=model.id;", "RETURN": ""}}, "REPOSITORY": "roles", "DBSCHEME": "(id, desc)", "DBMODEL": "Roles"}, "RoomsRepository": {"FILE": "src/repositories/roomsRepository", "METHODS": {"findByHotelAndBeds": {"RETURN": "array", "QUERY": "select * from rooms where hotel_id=:hotelId and bed=:bedCount;"}, "findAll": {"RETURN": "array", "QUERY": "select * from rooms;"}, "find": {"RETURN": "one", "QUERY": "select * from rooms where id=:id;"}, "findBy": {"RETURN": "array", "QUERY": "select * from rooms where :columnName=:value;"}, "findNewId": {"QUERY": "select max(id) from rooms;", "RETURN": "num"}, "save": {"COMMIT": "insert into rooms (id, bed, price, hotel_id, available) values :obj;", "RETURN": ""}, "update": {"COMMIT": "update rooms set (id, bed, price, hotel_id, available) = :obj where id=obj.id;", "RETURN": ""}, "delete": {"COMMIT": "delete from rooms where id=model.id;", "RETURN": ""}}, "REPOSITORY": "rooms", "DBSCHEME": "(id, bed, price, hotel_id, available)", "DBMODEL": "Rooms"}, "TokensRepository": {"FILE": "src/repositories/tokensRepository", "METHODS": {"findToken": {"RETURN": "one", "QUERY": "select * from tokens where user_id = :userId and ip = :userIp;"}, "findAll": {"RETURN": "array", "QUERY": "select * from tokens;"}, "find": {"RETURN": "one", "QUERY": "select * from tokens where id=:id;"}, "findBy": {"RETURN": "array", "QUERY": "select * from tokens where :columnName=:value;"}, "findNewId": {"QUERY": "select max(id) from tokens;", "RETURN": "num"}, "save": {"COMMIT": "insert into tokens (id, user_id, token, ip) values :obj;", "RETURN": ""}, "update": {"COMMIT": "update tokens set (id, user_id, token, ip) = :obj where id=obj.id;", "RETURN": ""}, "delete": {"COMMIT": "delete from tokens where id=model.id;", "RETURN": ""}}, "REPOSITORY": "tokens", "DBSCHEME": "(id, user_id, token, ip)", "DBMODEL": "Tokens"}, "UsersRepository": {"FILE": "src/repositories/usersRepository", "METHODS": {"findAll": {"RETURN": "array", "QUERY": "select * from users;"}, "find": {"RETURN": "one", "QUERY": "select * from users where id=:id;"}, "findBy": {"RETURN": "array", "QUERY": "select * from users where :columnName=:value;"}, "findNewId": {"QUERY": "select max(id) from users;", "RETURN": "num"}, "save": {"COMMIT": "insert into users (id, rule_id, login, phone, full_name) values :obj;", "RETURN": ""}, "update": {"COMMIT": "update users set (id, rule_id, login, phone, full_name) = :obj where id=obj.id;", "RETURN": ""}, "delete": {"COMMIT": "delete from users where id=model.id;", "RETURN": ""}}, "REPOSITORY": "users", "DBSCHEME": "(id, rule_id, login, phone, full_name)", "DBMODEL": "Users"}}, "TESTS": {}}