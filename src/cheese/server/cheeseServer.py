#!/usr/bin/env python
# -*- coding: utf-8 -*-

import json

from http.server import HTTPServer, BaseHTTPRequestHandler
from socketserver import ThreadingMixIn

from cheese.appSettings import Settings
from cheese.modules.cheeseController import CheeseController
from cheese.admin.adminManager import AdminManager
from cheese.Logger import Logger
from cheese.ErrorCodes import Error
from python.authorization import Authorization

#REST CONTROLLERS
from python.controllers.clubsController import ClubsController
from python.controllers.eventsController import EventsController
from python.controllers.hotelsController import HotelsController
from python.controllers.jbController import JbController
from python.controllers.registeredClubsController import RegisteredClubsController
from python.controllers.registeredHotelsController import RegisteredHotelsController
from python.controllers.registeredJbController import RegisteredJbController
from python.controllers.usersController import UsersController


"""
File generated by Cheese Framework

server handler of Cheese Application
"""

class CheeseServerMulti(ThreadingMixIn, HTTPServer):
    """Handle requests in a separate thread."""

class CheeseServer(HTTPServer):
    """Handle requests in one thread."""

class CheeseHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        if (self.path.startswith("/admin")):
            AdminManager.controller(self)
            return
        self.__log()
        if (self.path == "/alive"):
            CheeseController.sendResponse(self, CheeseController.createResponse({"RESPONSE": "Yes"}, 200))
            return
        try:
            path = CheeseController.getPath(self.path)
            auth = Authorization.authorize(self, path, "GET")
            if (auth == -1): 
                CheeseController.sendResponse(self, Error.BadToken)
                return

            if (path == "/"):
                CheeseController.serveFile(self, "index.html")
            elif (path.startswith("/clubs")):
                if (path.startswith("/clubs/getAll")):
                    ClubsController.getAll(self, self.path, auth)
                elif (path.startswith("/clubs/getByUser")):
                    ClubsController.getByUser(self, self.path, auth)
                else:
                    if (self.path.endswith(".css")):
                        CheeseController.serveFile(self, self.path, "text/css")
                    else:
                        CheeseController.serveFile(self, self.path)
            elif (path.startswith("/events")):
                if (path.startswith("/events/getEvent")):
                    EventsController.getEvent(self, self.path, auth)
                elif (path.startswith("/events/getBy")):
                    EventsController.getBy(self, self.path, auth)
                elif (path.startswith("/events/remove")):
                    EventsController.remove(self, self.path, auth)
                else:
                    if (self.path.endswith(".css")):
                        CheeseController.serveFile(self, self.path, "text/css")
                    else:
                        CheeseController.serveFile(self, self.path)
            elif (path.startswith("/hotels")):
                if (path.startswith("/hotels/getAll")):
                    HotelsController.getAll(self, self.path, auth)
                else:
                    if (self.path.endswith(".css")):
                        CheeseController.serveFile(self, self.path, "text/css")
                    else:
                        CheeseController.serveFile(self, self.path)
            elif (path.startswith("/jb")):
                if (path.startswith("/jb/getByClub")):
                    JbController.getByClub(self, self.path, auth)
                else:
                    if (self.path.endswith(".css")):
                        CheeseController.serveFile(self, self.path, "text/css")
                    else:
                        CheeseController.serveFile(self, self.path)
            elif (path.startswith("/registeredClubs")):
                pass
            elif (path.startswith("/registeredHotels")):
                pass
            elif (path.startswith("/registeredJb")):
                pass
            elif (path.startswith("/users")):
                if (path.startswith("/users/login")):
                    UsersController.login(self, self.path, auth)
                elif (path.startswith("/users/create")):
                    UsersController.create(self, self.path, auth)
                else:
                    if (self.path.endswith(".css")):
                        CheeseController.serveFile(self, self.path, "text/css")
                    else:
                        CheeseController.serveFile(self, self.path)
            else:
                if (self.path.endswith(".css")):
                    CheeseController.serveFile(self, self.path, "text/css")
                else:
                    CheeseController.serveFile(self, self.path)
        
        except Exception as e:
            Logger.fail("An error unknown occurred", e)
            Error.sendCustomError(self, "Internal server error :(", 500)

    def do_POST(self):
        self.__log()
        try:
            auth = Authorization.authorize(self, self.path, "POST")
            if (auth == -1): 
                CheeseController.sendResponse(self, Error.BadToken)
                return

            if (self.path.startswith("/clubs")):
                if (self.path.startswith("/clubs/create")):
                    ClubsController.create(self, self.path, auth)
                elif (self.path.startswith("/clubs/update")):
                    ClubsController.update(self, self.path, auth)
                elif (self.path.startswith("/clubs/remove")):
                    ClubsController.remove(self, self.path, auth)
                else:
                    Error.sendCustomError(self, "Endpoint not found :(", 404)
            elif (self.path.startswith("/events")):
                if (self.path.startswith("/events/create")):
                    EventsController.create(self, self.path, auth)
                elif (self.path.startswith("/events/update")):
                    EventsController.update(self, self.path, auth)
                else:
                    Error.sendCustomError(self, "Endpoint not found :(", 404)
            elif (self.path.startswith("/hotels")):
                if (self.path.startswith("/hotels/create")):
                    HotelsController.create(self, self.path, auth)
                elif (self.path.startswith("/hotels/update")):
                    HotelsController.update(self, self.path, auth)
                elif (self.path.startswith("/hotels/getByName")):
                    HotelsController.getByName(self, self.path, auth)
                elif (self.path.startswith("/hotels/getByPlace")):
                    HotelsController.getByPlace(self, self.path, auth)
                elif (self.path.startswith("/hotels/getRooms")):
                    HotelsController.getRooms(self, self.path, auth)
                elif (self.path.startswith("/hotels/reserveBed")):
                    HotelsController.reserveBed(self, self.path, auth)
                elif (self.path.startswith("/hotels/remove")):
                    HotelsController.remove(self, self.path, auth)
                else:
                    Error.sendCustomError(self, "Endpoint not found :(", 404)
            elif (self.path.startswith("/jb")):
                if (self.path.startswith("/jb/create")):
                    JbController.create(self, self.path, auth)
                elif (self.path.startswith("/jb/createFromCvs")):
                    JbController.createFromCvs(self, self.path, auth)
                elif (self.path.startswith("/jb/createByCvs")):
                    JbController.createFromCvs(self, self.path, auth)
                elif (self.path.startswith("/jb/update")):
                    JbController.update(self, self.path, auth)
                elif (self.path.startswith("/jb/remove")):
                    JbController.remove(self, self.path, auth)
                else:
                    Error.sendCustomError(self, "Endpoint not found :(", 404)
            elif (self.path.startswith("/registeredClubs")):
                if (self.path.startswith("/registeredClubs/create")):
                    RegisteredClubsController.create(self, self.path, auth)
                elif (self.path.startswith("/registeredClubs/register")):
                    RegisteredClubsController.register(self, self.path, auth)
                elif (self.path.startswith("/registeredClubs/getByEvent")):
                    RegisteredClubsController.getByEvent(self, self.path, auth)
                elif (self.path.startswith("/registeredClubs/remove")):
                    RegisteredClubsController.remove(self, self.path, auth)
                else:
                    Error.sendCustomError(self, "Endpoint not found :(", 404)
            elif (self.path.startswith("/registeredHotels")):
                if (self.path.startswith("/registeredHotels/create")):
                    RegisteredHotelsController.create(self, self.path, auth)
                elif (self.path.startswith("/registeredHotels/getByEvent")):
                    RegisteredHotelsController.getByEvent(self, self.path, auth)
                elif (self.path.startswith("/registeredHotels/remove")):
                    RegisteredHotelsController.remove(self, self.path, auth)
                else:
                    Error.sendCustomError(self, "Endpoint not found :(", 404)
            elif (self.path.startswith("/registeredJb")):
                if (self.path.startswith("/registeredJb/create")):
                    RegisteredJbController.create(self, self.path, auth)
                elif (self.path.startswith("/registeredJb/update")):
                    RegisteredJbController.update(self, self.path, auth)
                elif (self.path.startswith("/registeredJb/getByRegisteredClub")):
                    RegisteredJbController.getByRegisteredClub(self, self.path, auth)
                elif (self.path.startswith("/registeredJb/remove")):
                    RegisteredJbController.remove(self, self.path, auth)
                else:
                    Error.sendCustomError(self, "Endpoint not found :(", 404)
            elif (self.path.startswith("/users")):
                if (self.path.startswith("/users/register")):
                    UsersController.register(self, self.path, auth)
                elif (self.path.startswith("/users/get")):
                    UsersController.get(self, self.path, auth)
                else:
                    Error.sendCustomError(self, "Endpoint not found :(", 404)
            else:
                Error.sendCustomError(self, "Endpoint not found :(", 404)

        except Exception as e:
            Logger.fail("An error unknown occurred", e)
            Error.sendCustomError(self, "Internal server error :(", 500)

    def end_headers(self):
        if (Settings.allowCORS):
            self.send_header("Access-Control-Allow-Origin", "*")
            BaseHTTPRequestHandler.end_headers(self)
        else:
            self.send_header("Content-type", "application/json")

    def log_message(self, format, *args):
        return

    def __log(self):
        Logger.okGreen(f"{self.client_address[0]} - {self.command} \"{self.path}\"")

