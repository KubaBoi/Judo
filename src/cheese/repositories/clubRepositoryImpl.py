#!/usr/bin/env python
# -*- coding: utf-8 -*-
#AUTOGENERATED FILE

from cheese.databaseControll.database import Database
from cheese.Logger import Logger
from python.models.Club import Club


class ClubRepositoryImpl:

    @staticmethod
    def init():
        ClubRepositoryImpl.table = "clubs"
        ClubRepositoryImpl.scheme = "(id,title,code,eju,street,city,zip,email,phone,web)"
        ClubRepositoryImpl.schemeNoBrackets = "id,title,code,eju,street,city,zip,email,phone,web"

    @staticmethod
    def convert(var):
        if (type(var) is int):
            var = int(var)
        elif (type(var) is float):
            var = float(var)
        return var

    @staticmethod
    def toJson(object):
        scheme = ClubRepositoryImpl.schemeNoBrackets.split(",")
        ret = {}
        for s, o in zip(scheme, list(object)):
            try:
                ret[s] = int(o)
            except:
                ret[s] = o
        return ret

    @staticmethod
    def toModel(obj):
        model = Club()
        model.id = ClubRepositoryImpl.convert(obj[0])
        model.title = ClubRepositoryImpl.convert(obj[1])
        model.code = ClubRepositoryImpl.convert(obj[2])
        model.eju = ClubRepositoryImpl.convert(obj[3])
        model.street = ClubRepositoryImpl.convert(obj[4])
        model.city = ClubRepositoryImpl.convert(obj[5])
        model.zip = ClubRepositoryImpl.convert(obj[6])
        model.email = ClubRepositoryImpl.convert(obj[7])
        model.phone = ClubRepositoryImpl.convert(obj[8])
        model.web = ClubRepositoryImpl.convert(obj[9])
        return model

    @staticmethod
    def fromModel(model):
        tuple = (
            model.id,
            model.title,
            model.code,
            model.eju,
            model.street,
            model.city,
            model.zip,
            model.email,
            model.phone,
            model.web
        )
        return tuple

    @staticmethod
    def findClubById(args):
        clubId = args[0]

        response = None
        try:
            db = Database()
            response = db.query(f"select {ClubRepositoryImpl.schemeNoBrackets} from clubs where id={clubId};")
            db.done()
        except Exception as e:
            Logger.fail("An error occurred while query request", str(e))

        if (response == None): return response
        if (len(response) > 0):
            return ClubRepositoryImpl.toModel(response[0])
        else: return None

    @staticmethod
    def findAllClubsBy(args):
        filter = args[0]

        response = None
        try:
            db = Database()
            response = db.query(f"select {ClubRepositoryImpl.schemeNoBrackets} from clubs where {filter};")
            db.done()
        except Exception as e:
            Logger.fail("An error occurred while query request", str(e))

        if (response == None): return response
        resp = []
        for a in response:
            resp.append(ClubRepositoryImpl.toModel(a))
        return resp

    @staticmethod
    def doesClubExists(args):
        title = args[0]

        response = None
        try:
            db = Database()
            response = db.query(f"select case when exists (select * from clubs c where c.title = {title}) then cast(1 as bit) else cast(0 as bit) end;")
            db.done()
        except Exception as e:
            Logger.fail("An error occurred while query request", str(e))

        if (response == None): return response
        if (response[0][0] == "1"): return True
        return False

    @staticmethod
    def findNewId(args):

        response = None
        try:
            db = Database()
            response = db.query(f"select max(id) from clubs;")
            db.done()
        except Exception as e:
            Logger.fail("An error occurred while query request", str(e))

        if (response == None): return response
        return int(response[0][0])

    @staticmethod
    def save(args):
        obj = ClubRepositoryImpl.fromModel(args[0])

        try:
            db = Database()
            db.commit(f"insert into {ClubRepositoryImpl.table} {ClubRepositoryImpl.scheme} values {obj};")
            db.done()
            return True
        except Exception as e:
            Logger.fail("An error occurred while commit request", str(e))
            return False

    @staticmethod
    def update(args):
        obj = ClubRepositoryImpl.fromModel(args[0])

        try:
            db = Database()
            db.commit(f"update {ClubRepositoryImpl.table} set {ClubRepositoryImpl.scheme} = {obj} where id={obj[0]};")
            db.done()
            return True
        except Exception as e:
            Logger.fail("An error occurred while commit request", str(e))
            return False

    @staticmethod
    def delete(args):
        obj = ClubRepositoryImpl.fromModel(args[0])

        try:
            db = Database()
            db.commit(f"delete from {ClubRepositoryImpl.table} where id={obj[0]};")
            db.done()
            return True
        except Exception as e:
            Logger.fail("An error occurred while commit request", str(e))
            return False

