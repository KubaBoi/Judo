#!/usr/bin/env python
# -*- coding: utf-8 -*-
#AUTOGENERATED FILE

from cheese.databaseControll.database import Database
from cheese.Logger import Logger
from python.models.User import User


class UserRepositoryImpl:

    @staticmethod
    def init():
        UserRepositoryImpl.table = "users"
        UserRepositoryImpl.scheme = "(id,account_name,user_name)"
        UserRepositoryImpl.schemeNoBrackets = "id,account_name,user_name"

    @staticmethod
    def convert(var):
        if (type(var) is int):
            var = int(var)
        elif (type(var) is float):
            var = float(var)
        return var

    @staticmethod
    def toJson(object):
        scheme = UserRepositoryImpl.schemeNoBrackets.split(",")
        ret = {}
        for s, o in zip(scheme, list(object)):
            try:
                ret[s] = int(o)
            except:
                ret[s] = o
        return ret

    @staticmethod
    def toModel(obj):
        model = User()
        model.id = UserRepositoryImpl.convert(obj[0])
        model.account_name = UserRepositoryImpl.convert(obj[1])
        model.user_name = UserRepositoryImpl.convert(obj[2])
        return model

    @staticmethod
    def fromModel(model):
        tuple = (
            model.id,
            model.account_name,
            model.user_name
        )
        return tuple

    @staticmethod
    def findUserByCredentials(args):
        userName = args[0]
        password = args[1]

        response = None
        try:
            db = Database()
            response = db.query(f"select u.id, u.account_name, u.user_name from passwords p inner join users u on u.id = p.user_id where p.password = {password} and u.user_name = {userName};")
            db.done()
        except Exception as e:
            Logger.fail("An error occurred while query request", str(e))

        if (response == None): return response
        if (len(response) > 0):
            return UserRepositoryImpl.toModel(response[0])
        else: return None

    @staticmethod
    def save(args):
        obj = UserRepositoryImpl.fromModel(args[0])

        try:
            db = Database()
            db.commit(f"insert into {UserRepositoryImpl.table} {UserRepositoryImpl.scheme} values {obj};")
            db.done()
            return True
        except Exception as e:
            Logger.fail("An error occurred while commit request", str(e))
            return False

    @staticmethod
    def update(args):
        obj = UserRepositoryImpl.fromModel(args[0])

        try:
            db = Database()
            db.commit(f"update {UserRepositoryImpl.table} set {UserRepositoryImpl.scheme} = {obj} where id={obj[0]};")
            db.done()
            return True
        except Exception as e:
            Logger.fail("An error occurred while commit request", str(e))
            return False

    @staticmethod
    def delete(args):
        obj = UserRepositoryImpl.fromModel(args[0])

        try:
            db = Database()
            db.commit(f"delete from {UserRepositoryImpl.table} where id={obj[0]};")
            db.done()
            return True
        except Exception as e:
            Logger.fail("An error occurred while commit request", str(e))
            return False

