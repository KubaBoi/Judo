#!/usr/bin/env python
# -*- coding: utf-8 -*-
#AUTOGENERATED FILE

from cheese.databaseControll.database import Database
from cheese.Logger import Logger
from python.models.RegisteredJb import RegisteredJb


class RegisteredJbRepositoryImpl:

    @staticmethod
    def init():
        RegisteredJbRepositoryImpl.table = "registered_jb"
        RegisteredJbRepositoryImpl.scheme = "(id,reg_club_id,jb_id,arrive,departure,transport,flight_number)"
        RegisteredJbRepositoryImpl.schemeNoBrackets = "id,reg_club_id,jb_id,arrive,departure,transport,flight_number"

    @staticmethod
    def convert(var):
        if (type(var) is int):
            var = int(var)
        elif (type(var) is float):
            var = float(var)
        return var

    @staticmethod
    def toJson(object):
        scheme = RegisteredJbRepositoryImpl.schemeNoBrackets.split(",")
        ret = {}
        for s, o in zip(scheme, list(object)):
            try:
                ret[s] = int(o)
            except:
                ret[s] = o
        return ret

    @staticmethod
    def toModel(obj):
        model = RegisteredJb()
        model.id = RegisteredJbRepositoryImpl.convert(obj[0])
        model.reg_club_id = RegisteredJbRepositoryImpl.convert(obj[1])
        model.jb_id = RegisteredJbRepositoryImpl.convert(obj[2])
        model.arrive = RegisteredJbRepositoryImpl.convert(obj[3])
        model.departure = RegisteredJbRepositoryImpl.convert(obj[4])
        model.transport = RegisteredJbRepositoryImpl.convert(obj[5])
        model.flight_number = RegisteredJbRepositoryImpl.convert(obj[6])
        return model

    @staticmethod
    def fromModel(model):
        tuple = (
            model.id,
            model.reg_club_id,
            model.jb_id,
            model.arrive,
            model.departure,
            model.transport,
            model.flight_number
        )
        return tuple

    @staticmethod
    def findAll(args):

        response = None
        try:
            db = Database()
            response = db.query(f"select {RegisteredJbRepositoryImpl.schemeNoBrackets} from registered_jb;")
            db.done()
        except Exception as e:
            Logger.fail("An error occurred while query request", str(e))

        if (response == None): return response
        resp = []
        for a in response:
            resp.append(RegisteredJbRepositoryImpl.toModel(a))
        return resp

    @staticmethod
    def find(args):
        id = args[0]

        response = None
        try:
            db = Database()
            response = db.query(f"select {RegisteredJbRepositoryImpl.schemeNoBrackets} from registered_jb where id={id};")
            db.done()
        except Exception as e:
            Logger.fail("An error occurred while query request", str(e))

        if (response == None): return response
        if (len(response) > 0):
            return RegisteredJbRepositoryImpl.toModel(response[0])
        else: return None

    @staticmethod
    def findBy(args):
        columnName = args[0]
        value = args[1]

        response = None
        try:
            db = Database()
            response = db.query(f"select {RegisteredJbRepositoryImpl.schemeNoBrackets} from registered_jb where {columnName}={value};")
            db.done()
        except Exception as e:
            Logger.fail("An error occurred while query request", str(e))

        if (response == None): return response
        resp = []
        for a in response:
            resp.append(RegisteredJbRepositoryImpl.toModel(a))
        return resp

    @staticmethod
    def findNewId(args):

        try:
            db = Database()
            db.commit(f"select max(id) from {RegisteredJbRepositoryImpl.table};")
            db.done()
            return True
        except Exception as e:
            Logger.fail("An error occurred while commit request", str(e))
            return False

    @staticmethod
    def save(args):
        obj = RegisteredJbRepositoryImpl.fromModel(args[0])

        try:
            db = Database()
            db.commit(f"insert into {RegisteredJbRepositoryImpl.table} {RegisteredJbRepositoryImpl.scheme} values {obj};")
            db.done()
            return True
        except Exception as e:
            Logger.fail("An error occurred while commit request", str(e))
            return False

    @staticmethod
    def update(args):
        obj = RegisteredJbRepositoryImpl.fromModel(args[0])

        try:
            db = Database()
            db.commit(f"update {RegisteredJbRepositoryImpl.table} set {RegisteredJbRepositoryImpl.scheme} = {obj} where id={obj[0]};")
            db.done()
            return True
        except Exception as e:
            Logger.fail("An error occurred while commit request", str(e))
            return False

    @staticmethod
    def delete(args):
        obj = RegisteredJbRepositoryImpl.fromModel(args[0])

        try:
            db = Database()
            db.commit(f"delete from {RegisteredJbRepositoryImpl.table} where id={obj[0]};")
            db.done()
            return True
        except Exception as e:
            Logger.fail("An error occurred while commit request", str(e))
            return False

