#!/usr/bin/env python
# -*- coding: utf-8 -*-
#AUTOGENERATED FILE

from cheese.databaseControll.database import Database
from cheese.Logger import Logger
from python.models.Hotel import Hotel


class HotelRepositoryImpl:

    @staticmethod
    def init():
        HotelRepositoryImpl.table = "hotels"
        HotelRepositoryImpl.scheme = "(id,title,street,city,zip,email,phone,web)"
        HotelRepositoryImpl.schemeNoBrackets = "id,title,street,city,zip,email,phone,web"

    @staticmethod
    def convert(var):
        if (type(var) is int):
            var = int(var)
        elif (type(var) is float):
            var = float(var)
        return var

    @staticmethod
    def toJson(object):
        scheme = HotelRepositoryImpl.schemeNoBrackets.split(",")
        ret = {}
        for s, o in zip(scheme, list(object)):
            try:
                ret[s] = int(o)
            except:
                ret[s] = o
        return ret

    @staticmethod
    def toModel(obj):
        model = Hotel()
        model.id = HotelRepositoryImpl.convert(obj[0])
        model.title = HotelRepositoryImpl.convert(obj[1])
        model.street = HotelRepositoryImpl.convert(obj[2])
        model.city = HotelRepositoryImpl.convert(obj[3])
        model.zip = HotelRepositoryImpl.convert(obj[4])
        model.email = HotelRepositoryImpl.convert(obj[5])
        model.phone = HotelRepositoryImpl.convert(obj[6])
        model.web = HotelRepositoryImpl.convert(obj[7])
        return model

    @staticmethod
    def fromModel(model):
        tuple = (
            model.id,
            model.title,
            model.street,
            model.city,
            model.zip,
            model.email,
            model.phone,
            model.web
        )
        return tuple

    @staticmethod
    def findHotelById(args):
        hotelId = args[0]

        response = None
        try:
            db = Database()
            response = db.query(f"select {HotelRepositoryImpl.schemeNoBrackets} from hotels where id={hotelId};")
            db.done()
        except Exception as e:
            Logger.fail("An error occurred while query request", str(e))

        if (response == None): return response
        if (len(response) > 0):
            return HotelRepositoryImpl.toModel(response[0])
        else: return None

    @staticmethod
    def findAllHotelsBy(args):
        bedFilter = args[0]
        filter = args[1]

        response = None
        try:
            db = Database()
            response = db.query(f"select distinct h.id, h.title, h.street, h.city, h.zip, h.email, h.phone, h.web from rooms r inner join hotels h on h.id = r.hotel_id where {bedFilter} and {filter};")
            db.done()
        except Exception as e:
            Logger.fail("An error occurred while query request", str(e))

        if (response == None): return response
        resp = []
        for a in response:
            resp.append(HotelRepositoryImpl.toModel(a))
        return resp

    @staticmethod
    def doesHotelExists(args):
        title = args[0]

        response = None
        try:
            db = Database()
            response = db.query(f"select case when exists (select * from hotels h where h.title = {title}) then cast(1 as bit) else cast(0 as bit) end;")
            db.done()
        except Exception as e:
            Logger.fail("An error occurred while query request", str(e))

        if (response == None): return response
        if (response[0][0] == "1"): return True
        return False

    @staticmethod
    def findNewId(args):

        response = None
        try:
            db = Database()
            response = db.query(f"select max(id) from hotels;")
            db.done()
        except Exception as e:
            Logger.fail("An error occurred while query request", str(e))

        if (response == None): return response
        return int(response[0][0])

    @staticmethod
    def save(args):
        obj = HotelRepositoryImpl.fromModel(args[0])

        try:
            db = Database()
            db.commit(f"insert into {HotelRepositoryImpl.table} {HotelRepositoryImpl.scheme} values {obj};")
            db.done()
            return True
        except Exception as e:
            Logger.fail("An error occurred while commit request", str(e))
            return False

    @staticmethod
    def update(args):
        obj = HotelRepositoryImpl.fromModel(args[0])

        try:
            db = Database()
            db.commit(f"update {HotelRepositoryImpl.table} set {HotelRepositoryImpl.scheme} = {obj} where id={obj[0]};")
            db.done()
            return True
        except Exception as e:
            Logger.fail("An error occurred while commit request", str(e))
            return False

    @staticmethod
    def delete(args):
        obj = HotelRepositoryImpl.fromModel(args[0])

        try:
            db = Database()
            db.commit(f"delete from {HotelRepositoryImpl.table} where id={obj[0]};")
            db.done()
            return True
        except Exception as e:
            Logger.fail("An error occurred while commit request", str(e))
            return False

