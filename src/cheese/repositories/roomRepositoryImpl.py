#!/usr/bin/env python
# -*- coding: utf-8 -*-
#AUTOGENERATED FILE

from cheese.databaseControll.database import Database
from cheese.Logger import Logger
from python.models.Room import Room


class RoomRepositoryImpl:

    @staticmethod
    def init():
        RoomRepositoryImpl.table = "rooms"
        RoomRepositoryImpl.scheme = "(id,hotel_id,bed,count,price_RO,price_BB,price_HB,price_FB)"
        RoomRepositoryImpl.schemeNoBrackets = "id,hotel_id,bed,count,price_RO,price_BB,price_HB,price_FB"

    @staticmethod
    def convert(var):
        if (type(var) is int):
            var = int(var)
        elif (type(var) is float):
            var = float(var)
        return var

    @staticmethod
    def toJson(object):
        scheme = RoomRepositoryImpl.schemeNoBrackets.split(",")
        ret = {}
        for s, o in zip(scheme, list(object)):
            try:
                ret[s] = int(o)
            except:
                ret[s] = o
        return ret

    @staticmethod
    def toModel(obj):
        model = Room()
        model.id = RoomRepositoryImpl.convert(obj[0])
        model.hotel_id = RoomRepositoryImpl.convert(obj[1])
        model.bed = RoomRepositoryImpl.convert(obj[2])
        model.count = RoomRepositoryImpl.convert(obj[3])
        model.price_RO = RoomRepositoryImpl.convert(obj[4])
        model.price_BB = RoomRepositoryImpl.convert(obj[5])
        model.price_HB = RoomRepositoryImpl.convert(obj[6])
        model.price_FB = RoomRepositoryImpl.convert(obj[7])
        return model

    @staticmethod
    def fromModel(model):
        tuple = (
            model.id,
            model.hotel_id,
            model.bed,
            model.count,
            model.price_RO,
            model.price_BB,
            model.price_HB,
            model.price_FB
        )
        return tuple

    @staticmethod
    def findRoomsByHotelId(args):
        hotelId = args[0]

        response = None
        try:
            db = Database()
            response = db.query(f"select {RoomRepositoryImpl.schemeNoBrackets} from rooms where hotel_id={hotelId};")
            db.done()
        except Exception as e:
            Logger.fail("An error occurred while query request", str(e))

        if (response == None): return response
        resp = []
        for a in response:
            resp.append(RoomRepositoryImpl.toModel(a))
        return resp

    @staticmethod
    def findNewId(args):

        response = None
        try:
            db = Database()
            response = db.query(f"select max(id) from rooms;")
            db.done()
        except Exception as e:
            Logger.fail("An error occurred while query request", str(e))

        if (response == None): return response
        return int(response[0][0])

    @staticmethod
    def save(args):
        obj = RoomRepositoryImpl.fromModel(args[0])

        try:
            db = Database()
            db.commit(f"insert into {RoomRepositoryImpl.table} {RoomRepositoryImpl.scheme} values {obj};")
            db.done()
            return True
        except Exception as e:
            Logger.fail("An error occurred while commit request", str(e))
            return False

    @staticmethod
    def update(args):
        obj = RoomRepositoryImpl.fromModel(args[0])

        try:
            db = Database()
            db.commit(f"update {RoomRepositoryImpl.table} set {RoomRepositoryImpl.scheme} = {obj} where id={obj[0]};")
            db.done()
            return True
        except Exception as e:
            Logger.fail("An error occurred while commit request", str(e))
            return False

    @staticmethod
    def delete(args):
        obj = RoomRepositoryImpl.fromModel(args[0])

        try:
            db = Database()
            db.commit(f"delete from {RoomRepositoryImpl.table} where id={obj[0]};")
            db.done()
            return True
        except Exception as e:
            Logger.fail("An error occurred while commit request", str(e))
            return False

