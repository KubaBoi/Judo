#!/usr/bin/env python
# -*- coding: utf-8 -*-

from datetime import datetime
import inspect

from cheese.resourceManager import ResMan
from cheese.databaseControll.database import Database

#REPOSITORIES
from cheese.repositories.bedRepositoryImpl import BedRepositoryImpl
from cheese.repositories.clubsRepositoryImpl import ClubsRepositoryImpl
from cheese.repositories.eventsRepositoryImpl import EventsRepositoryImpl
from cheese.repositories.hotelsRepositoryImpl import HotelsRepositoryImpl
from cheese.repositories.jbRepositoryImpl import JbRepositoryImpl
from cheese.repositories.passwordsRepositoryImpl import PasswordsRepositoryImpl
from cheese.repositories.registeredClubsRepositoryImpl import RegisteredClubsRepositoryImpl
from cheese.repositories.registeredHotelsRepositoryImpl import RegisteredHotelsRepositoryImpl
from cheese.repositories.registeredJbRepositoryImpl import RegisteredJbRepositoryImpl
from cheese.repositories.registeredTestsRepositoryImpl import RegisteredTestsRepositoryImpl
from cheese.repositories.registrationsRepositoryImpl import RegistrationsRepositoryImpl
from cheese.repositories.rolesRepositoryImpl import RolesRepositoryImpl
from cheese.repositories.roomsRepositoryImpl import RoomsRepositoryImpl
from cheese.repositories.tokensRepositoryImpl import TokensRepositoryImpl
from cheese.repositories.usersRepositoryImpl import UsersRepositoryImpl


"""
File generated by Cheese Framework

Database query of Cheese Application
"""

class CheeseRepository:

    @staticmethod
    def findAll(args):
        userRepository = CheeseRepository.findUserRepository()
        args = CheeseRepository.getTypeOf(args)

        if (userRepository == "bedRepository"):
            return BedRepositoryImpl.findAll(args)
        elif (userRepository == "clubsRepository"):
            return ClubsRepositoryImpl.findAll(args)
        elif (userRepository == "eventsRepository"):
            return EventsRepositoryImpl.findAll(args)
        elif (userRepository == "hotelsRepository"):
            return HotelsRepositoryImpl.findAll(args)
        elif (userRepository == "jbRepository"):
            return JbRepositoryImpl.findAll(args)
        elif (userRepository == "passwordsRepository"):
            return PasswordsRepositoryImpl.findAll(args)
        elif (userRepository == "registeredClubsRepository"):
            return RegisteredClubsRepositoryImpl.findAll(args)
        elif (userRepository == "registeredHotelsRepository"):
            return RegisteredHotelsRepositoryImpl.findAll(args)
        elif (userRepository == "registeredJbRepository"):
            return RegisteredJbRepositoryImpl.findAll(args)
        elif (userRepository == "registeredTestsRepository"):
            return RegisteredTestsRepositoryImpl.findAll(args)
        elif (userRepository == "registrationsRepository"):
            return RegistrationsRepositoryImpl.findAll(args)
        elif (userRepository == "rolesRepository"):
            return RolesRepositoryImpl.findAll(args)
        elif (userRepository == "roomsRepository"):
            return RoomsRepositoryImpl.findAll(args)
        elif (userRepository == "tokensRepository"):
            return TokensRepositoryImpl.findAll(args)
        elif (userRepository == "usersRepository"):
            return UsersRepositoryImpl.findAll(args)
    @staticmethod
    def find(args):
        userRepository = CheeseRepository.findUserRepository()
        args = CheeseRepository.getTypeOf(args)

        if (userRepository == "bedRepository"):
            return BedRepositoryImpl.find(args)
        elif (userRepository == "clubsRepository"):
            return ClubsRepositoryImpl.find(args)
        elif (userRepository == "eventsRepository"):
            return EventsRepositoryImpl.find(args)
        elif (userRepository == "hotelsRepository"):
            return HotelsRepositoryImpl.find(args)
        elif (userRepository == "jbRepository"):
            return JbRepositoryImpl.find(args)
        elif (userRepository == "passwordsRepository"):
            return PasswordsRepositoryImpl.find(args)
        elif (userRepository == "registeredClubsRepository"):
            return RegisteredClubsRepositoryImpl.find(args)
        elif (userRepository == "registeredHotelsRepository"):
            return RegisteredHotelsRepositoryImpl.find(args)
        elif (userRepository == "registeredJbRepository"):
            return RegisteredJbRepositoryImpl.find(args)
        elif (userRepository == "registeredTestsRepository"):
            return RegisteredTestsRepositoryImpl.find(args)
        elif (userRepository == "registrationsRepository"):
            return RegistrationsRepositoryImpl.find(args)
        elif (userRepository == "rolesRepository"):
            return RolesRepositoryImpl.find(args)
        elif (userRepository == "roomsRepository"):
            return RoomsRepositoryImpl.find(args)
        elif (userRepository == "tokensRepository"):
            return TokensRepositoryImpl.find(args)
        elif (userRepository == "usersRepository"):
            return UsersRepositoryImpl.find(args)
    @staticmethod
    def findBy(args):
        userRepository = CheeseRepository.findUserRepository()
        args = CheeseRepository.getTypeOf(args)

        if (userRepository == "bedRepository"):
            return BedRepositoryImpl.findBy(args)
        elif (userRepository == "clubsRepository"):
            return ClubsRepositoryImpl.findBy(args)
        elif (userRepository == "eventsRepository"):
            return EventsRepositoryImpl.findBy(args)
        elif (userRepository == "hotelsRepository"):
            return HotelsRepositoryImpl.findBy(args)
        elif (userRepository == "jbRepository"):
            return JbRepositoryImpl.findBy(args)
        elif (userRepository == "passwordsRepository"):
            return PasswordsRepositoryImpl.findBy(args)
        elif (userRepository == "registeredClubsRepository"):
            return RegisteredClubsRepositoryImpl.findBy(args)
        elif (userRepository == "registeredHotelsRepository"):
            return RegisteredHotelsRepositoryImpl.findBy(args)
        elif (userRepository == "registeredJbRepository"):
            return RegisteredJbRepositoryImpl.findBy(args)
        elif (userRepository == "registeredTestsRepository"):
            return RegisteredTestsRepositoryImpl.findBy(args)
        elif (userRepository == "registrationsRepository"):
            return RegistrationsRepositoryImpl.findBy(args)
        elif (userRepository == "rolesRepository"):
            return RolesRepositoryImpl.findBy(args)
        elif (userRepository == "roomsRepository"):
            return RoomsRepositoryImpl.findBy(args)
        elif (userRepository == "tokensRepository"):
            return TokensRepositoryImpl.findBy(args)
        elif (userRepository == "usersRepository"):
            return UsersRepositoryImpl.findBy(args)
    @staticmethod
    def findNewId(args):
        userRepository = CheeseRepository.findUserRepository()
        args = CheeseRepository.getTypeOf(args)

        if (userRepository == "bedRepository"):
            return BedRepositoryImpl.findNewId(args)
        elif (userRepository == "clubsRepository"):
            return ClubsRepositoryImpl.findNewId(args)
        elif (userRepository == "eventsRepository"):
            return EventsRepositoryImpl.findNewId(args)
        elif (userRepository == "hotelsRepository"):
            return HotelsRepositoryImpl.findNewId(args)
        elif (userRepository == "jbRepository"):
            return JbRepositoryImpl.findNewId(args)
        elif (userRepository == "passwordsRepository"):
            return PasswordsRepositoryImpl.findNewId(args)
        elif (userRepository == "registeredClubsRepository"):
            return RegisteredClubsRepositoryImpl.findNewId(args)
        elif (userRepository == "registeredHotelsRepository"):
            return RegisteredHotelsRepositoryImpl.findNewId(args)
        elif (userRepository == "registeredJbRepository"):
            return RegisteredJbRepositoryImpl.findNewId(args)
        elif (userRepository == "registeredTestsRepository"):
            return RegisteredTestsRepositoryImpl.findNewId(args)
        elif (userRepository == "registrationsRepository"):
            return RegistrationsRepositoryImpl.findNewId(args)
        elif (userRepository == "rolesRepository"):
            return RolesRepositoryImpl.findNewId(args)
        elif (userRepository == "roomsRepository"):
            return RoomsRepositoryImpl.findNewId(args)
        elif (userRepository == "tokensRepository"):
            return TokensRepositoryImpl.findNewId(args)
        elif (userRepository == "usersRepository"):
            return UsersRepositoryImpl.findNewId(args)
    @staticmethod
    def findBySorted(args):
        userRepository = CheeseRepository.findUserRepository()
        args = CheeseRepository.getTypeOf(args)

        if (userRepository == "eventsRepository"):
            return EventsRepositoryImpl.findBySorted(args)
    @staticmethod
    def login(args):
        userRepository = CheeseRepository.findUserRepository()
        args = CheeseRepository.getTypeOf(args)

        if (userRepository == "passwordsRepository"):
            return PasswordsRepositoryImpl.login(args)
    @staticmethod
    def findToken(args):
        userRepository = CheeseRepository.findUserRepository()
        args = CheeseRepository.getTypeOf(args)

        if (userRepository == "tokensRepository"):
            return TokensRepositoryImpl.findToken(args)


    @staticmethod
    def save(args):
        userRepository = CheeseRepository.findUserRepository()

        if (userRepository == "bedRepository"):
            return BedRepositoryImpl.save(args)
        elif (userRepository == "clubsRepository"):
            return ClubsRepositoryImpl.save(args)
        elif (userRepository == "eventsRepository"):
            return EventsRepositoryImpl.save(args)
        elif (userRepository == "hotelsRepository"):
            return HotelsRepositoryImpl.save(args)
        elif (userRepository == "jbRepository"):
            return JbRepositoryImpl.save(args)
        elif (userRepository == "passwordsRepository"):
            return PasswordsRepositoryImpl.save(args)
        elif (userRepository == "registeredClubsRepository"):
            return RegisteredClubsRepositoryImpl.save(args)
        elif (userRepository == "registeredHotelsRepository"):
            return RegisteredHotelsRepositoryImpl.save(args)
        elif (userRepository == "registeredJbRepository"):
            return RegisteredJbRepositoryImpl.save(args)
        elif (userRepository == "registeredTestsRepository"):
            return RegisteredTestsRepositoryImpl.save(args)
        elif (userRepository == "registrationsRepository"):
            return RegistrationsRepositoryImpl.save(args)
        elif (userRepository == "rolesRepository"):
            return RolesRepositoryImpl.save(args)
        elif (userRepository == "roomsRepository"):
            return RoomsRepositoryImpl.save(args)
        elif (userRepository == "tokensRepository"):
            return TokensRepositoryImpl.save(args)
        elif (userRepository == "usersRepository"):
            return UsersRepositoryImpl.save(args)
    @staticmethod
    def update(args):
        userRepository = CheeseRepository.findUserRepository()

        if (userRepository == "bedRepository"):
            return BedRepositoryImpl.update(args)
        elif (userRepository == "clubsRepository"):
            return ClubsRepositoryImpl.update(args)
        elif (userRepository == "eventsRepository"):
            return EventsRepositoryImpl.update(args)
        elif (userRepository == "hotelsRepository"):
            return HotelsRepositoryImpl.update(args)
        elif (userRepository == "jbRepository"):
            return JbRepositoryImpl.update(args)
        elif (userRepository == "passwordsRepository"):
            return PasswordsRepositoryImpl.update(args)
        elif (userRepository == "registeredClubsRepository"):
            return RegisteredClubsRepositoryImpl.update(args)
        elif (userRepository == "registeredHotelsRepository"):
            return RegisteredHotelsRepositoryImpl.update(args)
        elif (userRepository == "registeredJbRepository"):
            return RegisteredJbRepositoryImpl.update(args)
        elif (userRepository == "registeredTestsRepository"):
            return RegisteredTestsRepositoryImpl.update(args)
        elif (userRepository == "registrationsRepository"):
            return RegistrationsRepositoryImpl.update(args)
        elif (userRepository == "rolesRepository"):
            return RolesRepositoryImpl.update(args)
        elif (userRepository == "roomsRepository"):
            return RoomsRepositoryImpl.update(args)
        elif (userRepository == "tokensRepository"):
            return TokensRepositoryImpl.update(args)
        elif (userRepository == "usersRepository"):
            return UsersRepositoryImpl.update(args)
    @staticmethod
    def delete(args):
        userRepository = CheeseRepository.findUserRepository()

        if (userRepository == "bedRepository"):
            return BedRepositoryImpl.delete(args)
        elif (userRepository == "clubsRepository"):
            return ClubsRepositoryImpl.delete(args)
        elif (userRepository == "eventsRepository"):
            return EventsRepositoryImpl.delete(args)
        elif (userRepository == "hotelsRepository"):
            return HotelsRepositoryImpl.delete(args)
        elif (userRepository == "jbRepository"):
            return JbRepositoryImpl.delete(args)
        elif (userRepository == "passwordsRepository"):
            return PasswordsRepositoryImpl.delete(args)
        elif (userRepository == "registeredClubsRepository"):
            return RegisteredClubsRepositoryImpl.delete(args)
        elif (userRepository == "registeredHotelsRepository"):
            return RegisteredHotelsRepositoryImpl.delete(args)
        elif (userRepository == "registeredJbRepository"):
            return RegisteredJbRepositoryImpl.delete(args)
        elif (userRepository == "registeredTestsRepository"):
            return RegisteredTestsRepositoryImpl.delete(args)
        elif (userRepository == "registrationsRepository"):
            return RegistrationsRepositoryImpl.delete(args)
        elif (userRepository == "rolesRepository"):
            return RolesRepositoryImpl.delete(args)
        elif (userRepository == "roomsRepository"):
            return RoomsRepositoryImpl.delete(args)
        elif (userRepository == "tokensRepository"):
            return TokensRepositoryImpl.delete(args)
        elif (userRepository == "usersRepository"):
            return UsersRepositoryImpl.delete(args)


    @staticmethod
    def initRepositories():
        BedRepositoryImpl.init()
        ClubsRepositoryImpl.init()
        EventsRepositoryImpl.init()
        HotelsRepositoryImpl.init()
        JbRepositoryImpl.init()
        PasswordsRepositoryImpl.init()
        RegisteredClubsRepositoryImpl.init()
        RegisteredHotelsRepositoryImpl.init()
        RegisteredJbRepositoryImpl.init()
        RegisteredTestsRepositoryImpl.init()
        RegistrationsRepositoryImpl.init()
        RolesRepositoryImpl.init()
        RoomsRepositoryImpl.init()
        TokensRepositoryImpl.init()
        UsersRepositoryImpl.init()

        pass

    # finds name of user-made repository
    @staticmethod
    def findUserRepository():
        curframe = inspect.currentframe()
        calframe = inspect.getouterframes(curframe, 2)
        userRepository = ResMan.getFileName(calframe[2][1]).replace(".py", "")
        return userRepository

    # convert arguments
    @staticmethod
    def getTypeOf(args):
        newArgs = []
        for arg in args:
            if (type(arg) is str):
                if (len(arg) == 0): newArgs.append("")
                elif (arg[-1] != "\'" 
                    and arg[-1] != ")" 
                    and not arg.endswith("DESC") 
                    and not arg.endswith("ASC")):
                    if (arg.startswith("columnName-")):
                        newArgs.append(arg.replace("columnName-", ""))
                    else:
                        newArgs.append(f"\'{arg}\'")
                else:
                    newArgs.append(str(arg))
            elif (type(arg) is list):
                newArgs.append("(" + ",".join(CheeseRepository.getTypeOf(arg)) + ")")
            elif (type(arg) is datetime):
                newArgs.append("'" + datetime.strftime(arg, "%d-%m-%Y %H:%M:%S") + "'")
            else:
                newArgs.append(str(arg))
        return newArgs

