#!/usr/bin/env python
# -*- coding: utf-8 -*-

import inspect

from cheese.resourceManager import ResMan
from cheese.databaseControll.database import Database

#REPOSITORIES
from cheese.repositories.clubRepositoryImpl import ClubRepositoryImpl
from cheese.repositories.hotelRepositoryImpl import HotelRepositoryImpl
from cheese.repositories.roomRepositoryImpl import RoomRepositoryImpl
from cheese.repositories.tokenRepositoryImpl import TokenRepositoryImpl
from cheese.repositories.userRepositoryImpl import UserRepositoryImpl


"""
File generated by Cheese Framework

Database query of Cheese Application
"""

class CheeseRepository:

    @staticmethod
    def findClubById(args):
        userRepository = CheeseRepository.findUserRepository()
        args = CheeseRepository.getTypeOf(args)

        if (userRepository == "clubRepository"):
            return ClubRepositoryImpl.findClubById(args)
    @staticmethod
    def findAllClubsBy(args):
        userRepository = CheeseRepository.findUserRepository()
        args = CheeseRepository.getTypeOf(args)

        if (userRepository == "clubRepository"):
            return ClubRepositoryImpl.findAllClubsBy(args)
    @staticmethod
    def doesClubExists(args):
        userRepository = CheeseRepository.findUserRepository()
        args = CheeseRepository.getTypeOf(args)

        if (userRepository == "clubRepository"):
            return ClubRepositoryImpl.doesClubExists(args)
    @staticmethod
    def findNewId(args):
        userRepository = CheeseRepository.findUserRepository()
        args = CheeseRepository.getTypeOf(args)

        if (userRepository == "clubRepository"):
            return ClubRepositoryImpl.findNewId(args)
        elif (userRepository == "hotelRepository"):
            return HotelRepositoryImpl.findNewId(args)
        elif (userRepository == "roomRepository"):
            return RoomRepositoryImpl.findNewId(args)
        elif (userRepository == "tokenRepository"):
            return TokenRepositoryImpl.findNewId(args)
    @staticmethod
    def findHotelById(args):
        userRepository = CheeseRepository.findUserRepository()
        args = CheeseRepository.getTypeOf(args)

        if (userRepository == "hotelRepository"):
            return HotelRepositoryImpl.findHotelById(args)
    @staticmethod
    def findAllHotelsBy(args):
        userRepository = CheeseRepository.findUserRepository()
        args = CheeseRepository.getTypeOf(args)

        if (userRepository == "hotelRepository"):
            return HotelRepositoryImpl.findAllHotelsBy(args)
    @staticmethod
    def doesHotelExists(args):
        userRepository = CheeseRepository.findUserRepository()
        args = CheeseRepository.getTypeOf(args)

        if (userRepository == "hotelRepository"):
            return HotelRepositoryImpl.doesHotelExists(args)
    @staticmethod
    def findRoomsByHotelId(args):
        userRepository = CheeseRepository.findUserRepository()
        args = CheeseRepository.getTypeOf(args)

        if (userRepository == "roomRepository"):
            return RoomRepositoryImpl.findRoomsByHotelId(args)
    @staticmethod
    def findTokenByUserIdAndIp(args):
        userRepository = CheeseRepository.findUserRepository()
        args = CheeseRepository.getTypeOf(args)

        if (userRepository == "tokenRepository"):
            return TokenRepositoryImpl.findTokenByUserIdAndIp(args)
    @staticmethod
    def validateToken(args):
        userRepository = CheeseRepository.findUserRepository()
        args = CheeseRepository.getTypeOf(args)

        if (userRepository == "tokenRepository"):
            return TokenRepositoryImpl.validateToken(args)
    @staticmethod
    def findUserByCredentials(args):
        userRepository = CheeseRepository.findUserRepository()
        args = CheeseRepository.getTypeOf(args)

        if (userRepository == "userRepository"):
            return UserRepositoryImpl.findUserByCredentials(args)


    @staticmethod
    def save(args):
        userRepository = CheeseRepository.findUserRepository()

        if (userRepository == "clubRepository"):
            return ClubRepositoryImpl.save(args)
        elif (userRepository == "hotelRepository"):
            return HotelRepositoryImpl.save(args)
        elif (userRepository == "roomRepository"):
            return RoomRepositoryImpl.save(args)
        elif (userRepository == "tokenRepository"):
            return TokenRepositoryImpl.save(args)
        elif (userRepository == "userRepository"):
            return UserRepositoryImpl.save(args)
    @staticmethod
    def update(args):
        userRepository = CheeseRepository.findUserRepository()

        if (userRepository == "clubRepository"):
            return ClubRepositoryImpl.update(args)
        elif (userRepository == "hotelRepository"):
            return HotelRepositoryImpl.update(args)
        elif (userRepository == "roomRepository"):
            return RoomRepositoryImpl.update(args)
        elif (userRepository == "tokenRepository"):
            return TokenRepositoryImpl.update(args)
        elif (userRepository == "userRepository"):
            return UserRepositoryImpl.update(args)
    @staticmethod
    def delete(args):
        userRepository = CheeseRepository.findUserRepository()

        if (userRepository == "clubRepository"):
            return ClubRepositoryImpl.delete(args)
        elif (userRepository == "hotelRepository"):
            return HotelRepositoryImpl.delete(args)
        elif (userRepository == "roomRepository"):
            return RoomRepositoryImpl.delete(args)
        elif (userRepository == "tokenRepository"):
            return TokenRepositoryImpl.delete(args)
        elif (userRepository == "userRepository"):
            return UserRepositoryImpl.delete(args)


    @staticmethod
    def initRepositories():
        ClubRepositoryImpl.init()
        HotelRepositoryImpl.init()
        RoomRepositoryImpl.init()
        TokenRepositoryImpl.init()
        UserRepositoryImpl.init()

        pass

    # finds name of user-made repository
    @staticmethod
    def findUserRepository():
        curframe = inspect.currentframe()
        calframe = inspect.getouterframes(curframe, 2)
        userRepository = ResMan.getFileName(calframe[2][1]).replace(".py", "")
        return userRepository

    # convert arguments
    @staticmethod
    def getTypeOf(args):
        newArgs = []
        for arg in args:
            if (type(arg) is str and arg[-1] != "\'" 
                and arg[-1] != ")" 
                and not arg.endswith("DESC") 
                and not arg.endswith("ASC")):
                if (arg.startswith("columnName-")):
                    newArgs.append(arg.replace("columnName-", ""))
                else:
                    newArgs.append(f"\'{arg}\'")
            elif (type(arg) is list):
                newArgs.append("(" + ",".join(CheeseRepository.getTypeOf(arg)) + ")")
            else:
                newArgs.append(str(arg))
        return newArgs

